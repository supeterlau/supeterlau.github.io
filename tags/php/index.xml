<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>php on CodeMist</title><link>https://www.peterlau.xyz/tags/php/</link><description>Recent content in php on CodeMist</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 14 Nov 2014 21:41:37 +0000</lastBuildDate><atom:link href="https://www.peterlau.xyz/tags/php/index.xml" rel="self" type="application/rss+xml"/><item><title>使用PHP开发网站的业余选手感想</title><link>https://www.peterlau.xyz/posts/use-php-make-a-website/</link><pubDate>Fri, 14 Nov 2014 21:41:37 +0000</pubDate><guid>https://www.peterlau.xyz/posts/use-php-make-a-website/</guid><description> &lt;p>这是个疯狂的时代. 自从 Facebook 诞生以来, 地球上出现了太多语言可以编写网页应用. 从保罗格雷厄姆推崇的 LISP/Arc 到最近的新生语言 Go. 其中最成功的当属 PHP.看看当下培训机构的火爆就可以知道, 而且国内各大网络服务招募的也都是 PHP 方面的人. 从百度到阿里, 从新兴小米到创业机构, 似乎 Python/Ruby/Node 这些新成员没有分走太多份额, 加上 ASP.net 和 Java. 这才是三强争霸. PHP 的语言特色并不为人推崇, 但其快速部署, 便于发布的特色决定了其流行度.&lt;/p>
&lt;p>PHP 的语法并不复杂, 就像是脚本化的 C 语言, 只需要一台支持 PHP 解析的服务器, 放上代码, 设置好域名, OK 一切就绪, 项目上线了.&lt;/p>
&lt;p>随着时间发展, PHP 也变得更加模块化和组件化. 纷杂的框架往往扰乱了人们对于语法的了解, 在我看来最佳的学习地方就是官网.&lt;/p>
&lt;p>PHP5 开始有了面向对象语法. 支持封装, 继承. 然而在我看来正常的流程是先过程式, 再面向对象化, 至于函数式编程更像是一种代码书写风格而非组织风格. 使用过程式写了很多代码多次重复了自己以后, 就更能体会到面向对象的好处, 代码复用.&lt;/p>
&lt;p>APEC 会议给我们放了一周假期, 因此我就抽了两天时间体验了下 PHP 直接写网站的酸爽. 服务器不用管; 页面渲染, PHP 内嵌入 HTML; 数据库连接, &lt;code>mysql_connect()&lt;/code>; Cookie管理, &lt;code>$_Cookie[]&lt;/code>; GET 和 POST, &lt;code>$_GET[] $_POST[]&lt;/code>; 一个基本的网站就是需要这些部分. 其中发现自己写一个页面还好, 多页面就无法控制那么多的变量名. 到这里, 基本的后端/服务端就做完了.&lt;/p>
&lt;p>当然也仅仅是基本能用, 很多验证, 异常处理都没有, 也没有测试, 模块化. 基本的增删改查就用掉了两天时间. 这就是框架的威力, PHP 的框架超级之多, 我使用过 Yii, CI 和 CakePHP, 魔法一样的数据库操作, 快捷但很迷惑. 最后我计划找时间看下cakephp,yii 以及Lavreal. Lavreal看起来才是像是现代框架, 很迷人.&lt;/p>
&lt;p>再说说最近对Web开发的体会. 基本上已经完成了 页面显示, 页面逻辑, 后台数据的分离. 服务端使用各种服务器语言, 应用端采用 AngularJS等前端框架, 显示层使用 ReactJS, HTMLCSS框架使用Bootstrap/Pure/Amaze等UI框架. 这也是我以后学习的方向.&lt;/p>
&lt;p>update 2014-11-16&lt;/p>
&lt;p>目前还在写那个答题网站的后台管理, 我也发现了 PHP 的面向对象是如此重要的, 希望能够找到实现类似多参数, 具名参数的写法. 数据库模块还是用的已经废弃的接口, 而且还有很多数据库的知识不具备. 有时间再替换用上 PDO 吧.&lt;/p>
&lt;p>最近一直是在处理序列数据, 希望能够有更多时间写代码啊. 试用了一下 CakePHP 都跟 ROR 学习的 脚手架吗? 直接就产生了 model view controller, 打算用着个开发个小应用吧. 恩&lt;/p></description></item></channel></rss>